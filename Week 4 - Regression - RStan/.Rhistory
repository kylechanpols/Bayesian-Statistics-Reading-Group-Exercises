install.packages('rstan')
knitr::opts_chunk$set(echo = TRUE)
library(rstan)
mod1 <- stan_model("lr.stan")
mod1 <- stan_model("lr.stan")
knitr::opts_chunk$set(echo = TRUE)
library(rstan)
mod1 <- stan_model("lr.stan")
?recipe
??recipe
recipe
install.packages('recipes')
install.packages("recipes")
install.packages("recipes")
install.packages("recipes")
knitr::opts_chunk$set(echo = TRUE)
library(recipes)
library(tidyverse)
install.packages('tidyverse')
install.packages("tidyverse")
install.packages("recipes")
knitr::opts_chunk$set(echo = TRUE)
library(rstan)
library(tidyverse)
install.packages('dplyr')
setwd("C:/Users/Kyle/Google Drive/TA/20 Fall - 787/GitHub-repo/POLI-787-2020-FALL-Internal")
setwd("C:/Users/Kyle/Google Drive/TA/20 Fall - 787/GitHub-repo/POLI-787-2020-FALL-Internal/lab data/")
install.packages('ordinal')
install.packages('AER')
knitr::opts_chunk$set(echo = TRUE, message=F, warning=F)
library(lme4)
library(haven)
library(tidyverse)
setwd("C:/Users/Kyle/Google Drive/TA/20 Fall - 787/GitHub-repo/POLI-787-2020-FALL-Internal/lab data")
ESS2018 <- read_dta("ESS9e02.dta")
dat <- ESS2018 %>% dplyr::select(cntry, imwbcnt, lrscale, stflife, trstplt, rlgdgr, gndr, yrbrn)
navalues <- c(77,88,99)
dat <- sapply(dat, function(x)
if(x %in% navalues)
x <- NA else x) %>% as.data.frame()
dat$age <- 2020 - as.numeric(levels(dat$yrbrn))[dat$yrbrn]
dat$imwbcnt <- as.numeric(dat$imwbcnt)
dat$lrscale <- as.numeric(dat$lrscale)
dat$stflife <- as.numeric(dat$stflife)
dat$trstplt <- as.numeric(dat$trstplt)
dat$rlgdgr <- as.numeric(dat$rlgdgr)
#ICC by hand:
nullmod <- lmer(as.numeric(imwbcnt) ~ (1|cntry), dat)
#VarCorr(nullmod) #explore the variance structure
interceptvar <- VarCorr(nullmod)$cntry %>% as.numeric() #variance attributed to country - note that if you extract this using the $ subset method, this quantity has already been squared for you.
residualvar <- attr(VarCorr(nullmod), "sc")^2 #residual variance - if you use the attr() method to recover this term, you have the square it back to find the variance.
#ICC by hand: country variance / country variance + residual variance
interceptvar/ (interceptvar + residualvar)
#by ICC() from mertools
dat$imwbcnt <- as.numeric(dat$imwbcnt)
merTools::ICC("imwbcnt", "cntry", dat)
library(Hmisc)
xyplot(imwbcnt ~ lrscale | cntry, data=ESS2018, main="Left-Right Scale by Country",
ylab="Immigrants make my country a better place to live ",
xlab="Left - Right Scale",
panel=function(x, y){
panel.xyplot(jitter(x, factor=2.5), jitter(y, factor=2.5), pch=".")
panel.loess(x, y, span=1, lwd=2, col="red")
panel.lmline(x, y, lty=1, lwd=2)
}, as.table=TRUE
)
library(lme4)
m1 <- lmer(imwbcnt ~lrscale+ stflife+ trstplt+ rlgdgr+ as.factor(gndr)+ age+ (1|cntry), data =dat)
dat$cntry
class(dat$cntry)
dat$cntry <- as.factor(dat$cntry)
m1 <- lmer(imwbcnt ~lrscale+ stflife+ trstplt+ rlgdgr+ as.factor(gndr)+ age+ (1|cntry), data =dat)
dat$cntry
dat$cntry %>% table
dat
dat <- ESS2018 %>% dplyr::select(cntry, imwbcnt, lrscale, stflife, trstplt, rlgdgr, gndr, yrbrn)
navalues <- c(77,88,99)
dat <- sapply(dat, function(x)
if(x %in% navalues)
x <- NA else x) %>% as.data.frame()
class(dat$age)
dat$age
class(dat$yrbrn)
as.numeric(dat$yrbrn)
xyplot(imwbcnt ~ lrscale | cntry, data=ESS2018, main="Left-Right Scale by Country",
ylab="Immigrants make my country a better place to live ",
xlab="Left - Right Scale",
panel=function(x, y){
panel.xyplot(jitter(x, factor=2.5), jitter(y, factor=2.5), pch=".")
panel.loess(x, y, span=1, lwd=2, col="red")
panel.lmline(x, y, lty=1, lwd=2)
}, as.table=TRUE
)
xyplot(imwbcnt ~ lrscale | cntry, data=dat, main="Left-Right Scale by Country",
ylab="Immigrants make my country a better place to live ",
xlab="Left - Right Scale",
panel=function(x, y){
panel.xyplot(jitter(x, factor=2.5), jitter(y, factor=2.5), pch=".")
panel.loess(x, y, span=1, lwd=2, col="red")
panel.lmline(x, y, lty=1, lwd=2)
}, as.table=TRUE
)
xyplot(imwbcnt ~ lrscale | cntry, data=ESS2018, main="Left-Right Scale by Country",
ylab="Immigrants make my country a better place to live ",
xlab="Left - Right Scale",
panel=function(x, y){
panel.xyplot(jitter(x, factor=2.5), jitter(y, factor=2.5), pch=".")
panel.loess(x, y, span=1, lwd=2, col="red")
panel.lmline(x, y, lty=1, lwd=2)
}, as.table=TRUE
)
ESS2018$imwbcnt
xyplot(as.numeric(imwbcnt) ~ as.numeric(lrscale) | cntry, data=ESS2018, main="Left-Right Scale by Country",
ylab="Immigrants make my country a better place to live ",
xlab="Left - Right Scale",
panel=function(x, y){
panel.xyplot(jitter(x, factor=2.5), jitter(y, factor=2.5), pch=".")
panel.loess(x, y, span=1, lwd=2, col="red")
panel.lmline(x, y, lty=1, lwd=2)
}, as.table=TRUE
)
install.packages('Amelia')
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(MCMCpack)
data(mtcars)
y <- mtcars$mpg #DV
X <- with(mtcars,
cbind(cyl,disp,hp,wt)) #IV
n_obs = length(y)
X = cbind(rep(1, n_obs), X) # This is sometimes called a Projection Matrix
n_params = ncol(X) # two covariates and a constant
beta_hat = solve(XtX, t(X) %*% y) # compute this ahead of time cause we'll need it a lot
Xtx = t(X) %*% X
XtX = t(X) %*% X
n_params = ncol(X) # two covariates and a constant
beta_hat = solve(XtX, t(X) %*% y) # compute this ahead of time cause we'll need it a lot
XtXprime = solve(t(X) %*% X) # X transpose X inverse
beta = c(0,0,0,0,0) # starting value
sigma2 = 0 #starting value
n_iterations = 5000
beta_out = matrix(data=NA, nrow=n_iterations, ncol=n_params)
sigma_out = matrix(data = NA, nrow = n_iterations, ncol=1)
for (i in 1:n_iterations){
## Update Beta
beta = mvrnorm(n=1, beta_hat, sigma2 * XtXprime) # need the multivariate cause we have three beta
#This is on Hoff p.159 without the g parameter.
SSR_beta = t(y - X %*% beta) %*% (y - X %*% beta)
sigma2 = rinvgamma(1, n_obs/2, SSR_beta/2) #see Hoff p.155 - without the nu_0 parameter.
beta_out[i,] = beta
sigma_out[i,] = sigma2
}
dim(SSR_beta)
SSR_beta
dim(sigma2)
sigma2
beta_out
sigma_out
head(beta.out)
head(beta_out)
beta_hat
posterior_sds = apply(beta_out, 2, sd)
#HPDI
library(HDInterval)
hpdi <- hdi(beta_out) %>% as.matrix()
#HPDI
library(HDInterval)
library(tidyverse)
hpdi <- hdi(beta_out) %>% as.matrix()
output <- rbind(colMeans(beta_out), posterior_sds, hpdi)
output <- t(output)
rownames(output) <- c("Intercept", "cyl","disp","hp","wt" )
colnames(output)[1] <- "Mean Beta"
colnames(output)[3:4] <- c("95% HPDI Lwr", "95% HPDI Upr")
output
#Compare to lm() output
summary(
lm(mpg~ cyl + disp + hp + wt, mtcars)
)
library(brms)
cars_model <- brm(mpg~ cyl+disp+hp+wt,
family=gaussian(), data=mtcars,
prior = c(
prior(normal(0,10), "b"),
prior(normal(0,50), "Intercept")),
chains=2, cores=5, iter=1000, warmup=100)
?brm
?brm
get_prior(mpg~ cyl+disp+hp+wt, mtcars)
cars_model <- brm(mpg~ cyl+disp+hp+wt,
family=gaussian(), data=mtcars,
prior = c(
prior(normal(0,10), "b"),
prior(normal(0,50), "Intercept")),
chains=2, cores=5, iter=1000, warmup=100)
summary(cars_model) #under the population-level effects.
plot(cars_model)
plot(conditional_effects(cars_model), ask=F)
