vals <- seq(from=0, to=100, by=1)
mood <- sample(vals, 100, replace=FALSE)
mean.y <- mean(mood)
var.y <- var(mood)
n <- length(mood)
###priors (see p.89 of Hoff for what these are)
mu0 <- 50 #mu not, the mu value for the mean of the prior normal distribution.
t20 <- sqrt(20) # tau not square, the sigma value for theta, given some uncertainty & data.
s20 <- .01 #sigma not square, sigma value for the prior normal.
nu0 <- 1 #nu0 , the term associated with the calculation of the alpha and beta terms for the variance of the prior normal distribution.
###starting values
S <- 1000 #Number of itereations
PHI <- matrix(NA,nrow=S, ncol=2, byrow=TRUE) # a 1000*2 matrix, where each row is an iteration of guesses, each column is a parameter - here = mu & sigma.
PHI[1,] <- phi <-  c(mean.y, 1/var.y) #data
for(s in 2:S){
#generate new theta value from its full conditional
mun <- (mu0/t20 + n*mean.y*phi[2]) / (1/t20 + n*phi[2])
t2n <- 1/(1/t20+ n*phi[2])
phi[1] <- rnorm(1, mun, sqrt(t2n))
#generate new 1/sigma^2 value from its full conditional
nun <- nu0+n
s2n <- (nu0*s20+(n-1)*var.y + n*(mean.y- phi[1])^2) / nun
phi[2] <- rgamma(1,nun/2, nun*s2n/2)
PHI[s,] <- phi
}
PHI[1000,]
library(ggplot2)
PHI <- as.data.frame(PHI)
PHI$i <- seq(from=1, to =1000, by=1)
colnames(PHI) <- c("mean", "var","iter")
plot5<- ggplot(PHI[1:5,], aes(x=mean, y=var))+
geom_point()+
geom_text(aes(label = iter))+
geom_line()+
theme_bw()
plot20 <- ggplot(PHI[1:20,], aes(x=mean, y=var))+
geom_point()+
geom_text(aes(label = iter))+
geom_line()+
theme_bw()
plot100 <- ggplot(PHI[1:100,], aes(x=mean, y=var))+
geom_point()+
geom_text(aes(label = iter))+
geom_line()+
theme_bw()
plot1000 <- ggplot(PHI[1:1000,], aes(x=mean, y=var))+
geom_point()+
geom_text(aes(label = iter))+
geom_line()+
theme_bw()
library(gridExtra)
grid.arrange(plot5,plot20,plot100,plot1000)
?geom_path
vals <- seq(from=0, to=100, by=1)
mood <- sample(vals, 100, replace=FALSE)
mean.y <- mean(mood)
var.y <- var(mood)
n <- length(mood)
###priors (see p.89 of Hoff for what these are)
mu0 <- 50 #mu not, the mu value for the mean of the prior normal distribution.
t20 <- sqrt(20) # tau not square, the sigma value for the mean of the prior normal distribution.
s20 <- .01 #sigma not square, the sigma value associated with the calculation of the beta term for the variance of the prior normal distribution.
nu0 <- 1 #nu0 , the term associated with the calculation of the alpha and beta terms for the variance of the prior normal distribution.
###starting values
S <- 1000 #Number of itereations
PHI <- matrix(NA,nrow=S, ncol=2, byrow=TRUE) # a 1000*2 matrix, where each row is an iteration of guesses, each column is a parameter - here = mu & sigma.
PHI[1,] <- phi <-  c(mean.y, 1/var.y) #data
### Metropolis-Hastings
for(s in 2:S){
#generate new theta value from its full conditional
currentphi_1 <- PHI[s-1,1] #get the previous value.
mun <- (mu0/t20 + n*mean.y*phi[2]) / (1/t20 + n*phi[2])
t2n <- 1/(1/t20+ n*phi[2])
proposedphi_1 <- phi[1] <- rnorm(1, mun, sqrt(t2n)) #proposed phi.
r_phi <- proposedphi_1/ currentphi_1 #this is called r in Hoff.
phi[1] <- ifelse(runif(1)<r_phi, proposedphi_1, currentphi_1) #set the next quantity to either the proposed new value, or the old value, with probability min(1,r) and max(0, 1-r).
#generate new 1/sigma^2 value from its full conditional
currentphi_2 <- PHI[s-1,2]
nun <- nu0+n
s2n <- (nu0*s20+(n-1)*var.y + n*(mean.y- phi[1])^2) / nun
proposedphi_2 <- phi[2] <- rgamma(1,nun/2, nun*s2n/2)
r_phi <- proposedphi_2/ currentphi_2
phi[2] <- ifelse(runif(1)<r_phi, proposedphi_2, currentphi_2)
PHI[s,] <- phi
}
PHI[1000,] #roughly the same results as using Gibbs Sampler.
#Part B. plot the "history" of the Metropolis. What's the results after 5 iterations, 20 iterations, 100 iterations and 1000 iterations?
PHI <- as.data.frame(PHI)
PHI$i <- seq(from=1, to =1000, by=1)
colnames(PHI) <- c("mean", "var","iter")
PHI <- as.data.frame(PHI)
plot5<- ggplot(PHI[1:5,], aes(x=mean, y=var))+
geom_point()+
geom_text(aes(label = iter))+
geom_path()+
theme_bw()
plot20 <- ggplot(PHI[1:20,], aes(x=mean, y=var))+
geom_point()+
geom_text(aes(label = iter))+
geom_path()+
theme_bw()
plot100 <- ggplot(PHI[1:100,], aes(x=mean, y=var))+
geom_point()+
geom_text(aes(label = iter))+
geom_path()+
theme_bw()
plot1000 <- ggplot(PHI[1:1000,], aes(x=mean, y=var))+
geom_point()+
geom_text(aes(label = iter))+
geom_path()+
theme_bw()
grid.arrange(plot5,plot20,plot100,plot1000)
